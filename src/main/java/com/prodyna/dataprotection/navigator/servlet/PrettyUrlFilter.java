/*
 * Copyright 2016 Red Hat, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prodyna.dataprotection.navigator.servlet;

import com.atlassian.confluence.user.AuthenticatedUserThreadLocal;
import com.atlassian.confluence.user.ConfluenceUser;
import org.apache.commons.io.FilenameUtils;

import javax.inject.Named;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Show the routes from Vue in the right context.
 */
@Named("dpnPrettyUrlFilter")
class PrettyUrlFilter implements Filter {

    private static final String BASE = "/dpn";
    private static final String WEBAPP_BASE = "/download/resources/com.prodyna.dataprotection-navigator/webapp";

    @Override
    public void init(FilterConfig filterConfig) {
        // not used
    }

    @Override
    public void destroy() {
        // not used
    }

    /**
     * Redirects the requests if necessary. If the user is at the root level of the
     * application, the user is redirected to the startpage. If a user reloads a
     * page, the user is redirected there as well. If a resource like image is
     * loaded, the path must be modified so the resource is delivered from download.
     * The frontend can't set the correct URL to downloads, as the URLs are
     * generated by vue.
     *
     * @param request  request
     * @param response response
     * @param chain    chain
     * @throws IOException      IO exception
     * @throws ServletException servlet exception
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
        if (!(request instanceof HttpServletRequest)) {
            chain.doFilter(request, response);
            return;
        }

        final HttpServletRequest req = (HttpServletRequest) request;
        final String originalPath = req.getServletPath();
        if (!originalPath.startsWith(BASE)) {
            chain.doFilter(request, response);
            return;
        }

        boolean redirect = false;
        String subPath = "";

        ConfluenceUser confluenceUser = AuthenticatedUserThreadLocal.get();
        if (confluenceUser == null) {
            redirect = true;
            subPath = "/login.action?os_destination=/dpn";
        } else {
            String extension = FilenameUtils.getExtension(originalPath);
            // If a requested file does not have an extension, then it must be a vue route
            // like /quiz0
            subPath = originalPath.substring(BASE.length());
            if (subPath.length() == 0 || subPath.equals("/") || extension.length() == 0
                    || subPath.startsWith("/dpn.vm")) {
                String page = FilenameUtils.getName(originalPath);
                subPath = BASE + "/index.html?page=" + page;
                redirect = true;
            }
        }

        if (redirect) {
            HttpServletResponse resp = (HttpServletResponse) response;
            subPath = req.getContextPath() + subPath;
            resp.sendRedirect(subPath);
        } else {
            final String realPath = WEBAPP_BASE + subPath;
            final RequestDispatcher rd = request.getRequestDispatcher(realPath);
            rd.forward(request, response);
        }

    }
}
